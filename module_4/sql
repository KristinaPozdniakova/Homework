Задание 4.1
База данных содержит список аэропортов практически всех крупных городов России. В большинстве городов есть только один аэропорт. Исключение составляет:
Ответ: Moscow, Ulyanovsk. Верно.

SELECT city
FROM dst_project.airports
GROUP BY city
HAVING count(airport_name)>1


Задание 4.2
Вопрос 1. Таблица рейсов содержит всю информацию о прошлых, текущих и запланированных рейсах. Сколько всего статусов для рейсов определено в таблице?
Ответ: 6. Верно.

SELECT count(DISTINCT status)
FROM dst_project.flights


Вопрос 2. Какое количество самолетов находятся в воздухе на момент среза в базе (статус рейса «самолёт уже вылетел и находится в воздухе»).
Ответ: 58. Верно.

SELECT count(flight_id)
FROM dst_project.flights
WHERE status='Departed'


Вопрос 3. Места определяют схему салона каждой модели. Сколько мест имеет самолет модели  (Boeing 777-300)?
Ответ: 402. Верно.

SELECT count(seat_no)
FROM dst_project.aircrafts a
     JOIN dst_project.seats s ON a.aircraft_code=s.aircraft_code
WHERE a.model = 'Boeing 777-300'


Вопрос 4. Сколько состоявшихся (фактических) рейсов было совершено между 1 апреля 2017 года и 1 сентября 2017 года?
Ответ: 74227. Верно.

SELECT count(flight_id)
FROM dst_project.flights
WHERE ((actual_departure BETWEEN '2017-04-01 00:00:00' AND '2017-08-31 23:59:59')
       OR (actual_arrival BETWEEN '2017-04-01 00:00:00' AND '2017-08-31 23:59:59'))
       AND status= 'Arrived'
       

Задание 4.3
Вопрос 1. Сколько всего рейсов было отменено по данным базы?
Ответ: 437. Верно.

SELECT count(flight_id)
FROM dst_project.flights
WHERE status= 'Cancelled'


Вопрос 2. Сколько самолетов моделей типа Boeing, Sukhoi Superjet, Airbus находится в базе авиаперевозок?

SELECT count(model)
FROM dst_project.aircrafts
WHERE model like 'Boeing%'

Ответ: 3. Верно.

SELECT count(model)
FROM dst_project.aircrafts
WHERE model like 'Sukhoi Superjet%'

Ответ: 1. Верно.

SELECT count(model)
FROM dst_project.aircrafts
WHERE model like 'Airbus%'

Ответ: 3. Верно.


Вопрос 3. В какой части (частях) света находится больше аэропортов?
Ответ: Europe, Asia. Верно.

SELECT count(airport_code),
       'Asia' time_zone
FROM dst_project.airports
WHERE timezone like 'Asia%'
GROUP BY time_zone
UNION ALL
SELECT count(airport_code),
       'Europe' time_zone
FROM dst_project.airports
WHERE timezone like 'Europe%'
GROUP BY time_zone
UNION ALL
SELECT count(airport_code),
       'Australia' time_zone
FROM dst_project.airports
WHERE timezone like 'Australia%'
GROUP BY time_zone


Вопрос 4. У какого рейса была самая большая задержка прибытия за все время сбора данных? Введите id рейса (flight_id).
Ответ: 157571. Верно.

SELECT flight_id
FROM dst_project.flights
WHERE status='Arrived'
ORDER BY scheduled_arrival-actual_arrival
LIMIT 1


Задание 4.4
Вопрос 1. Когда был запланирован самый первый вылет, сохраненный в базе данных?
Ответ: 14.08.2016. Верно.

SELECT scheduled_departure
FROM dst_project.flights
ORDER BY 1
LIMIT 1


Вопрос 2. Сколько минут составляет запланированное время полета в самом длительном рейсе?
Ответ: 530. Верно.

SELECT max(scheduled_arrival-scheduled_departure)
FROM dst_project.flights


Вопрос 3. Между какими аэропортами пролегает самый длительный по времени запланированный рейс?
Ответ: DME - UUS. Верно.

SELECT scheduled_arrival-scheduled_departure AS time_in_flight,
       departure_airport,
       arrival_airport
FROM dst_project.flights
ORDER BY 1 DESC
LIMIT 1


Вопрос 4. Сколько составляет средняя дальность полета среди всех самолетов в минутах? Секунды округляются в меньшую сторону (отбрасываются до минут).
Ответ: 128. Верно.

SELECT avg(scheduled_arrival-scheduled_departure)
FROM dst_project.flights


Задание 4.5
Вопрос 1. Мест какого класса у SU9 больше всего?
Ответ: Economy. Верно.

SELECT fare_conditions,
       count(seat_no)
FROM dst_project.seats
GROUP BY 1
ORDER BY 2 DESC


Вопрос 2. Какую самую минимальную стоимость составило бронирование за всю историю?
Ответ: 3400. Верно.

SELECT min(total_amount)
FROM dst_project.bookings


Вопрос 3. Какой номер места был у пассажира с id = 4313 788533?
Ответ: 2A. Верно.

SELECT seat_no
FROM dst_project.tickets t
     JOIN dst_project.boarding_passes b ON t.ticket_no=b.ticket_no
WHERE passenger_id='4313 788533'


Задание 5.1
Вопрос 1. Анапа — курортный город на юге России. Сколько рейсов прибыло в Анапу за 2017 год?
Ответ: 486

SELECT count(flight_id)
FROM dst_project.flights f
     JOIN dst_project.airports a ON f.arrival_airport = a.airport_code
WHERE a.city='Anapa'
     AND status = 'Arrived'
     AND actual_arrival BETWEEN '2017-01-01' AND '2017-12-31'


Вопрос 2. Сколько рейсов из Анапы вылетело зимой 2017 года?
Ответ: 127

SELECT count(flight_id)
FROM dst_project.flights f
     JOIN dst_project.airports a ON f.departure_airport = a.airport_code
WHERE a.city='Anapa'
  AND f.actual_departure BETWEEN '2017-01-01 00:00:00' AND '2017-02-28 23:59:59'
  OR f.actual_departure BETWEEN '2017-12-01 00:00:00' AND '2017-12-31 23:59:59'
  
  
Вопрос 3. Посчитайте количество отмененных рейсов из Анапы за все время.
Ответ: 1

SELECT count(flight_id)
FROM dst_project.flights f
     JOIN dst_project.airports a ON f.departure_airport = a.airport_code
WHERE a.city='Anapa'
     AND f.status='Cancelled'
  
  
Вопрос 4. Сколько рейсов из Анапы не летают в Москву?
Ответ: 453

SELECT count(flight_id)
FROM dst_project.flights
     JOIN dst_project.airports ON flights.arrival_airport = airports.airport_code
WHERE departure_airport='AAQ'
      AND city!='Moscow'
  
  
Вопрос 5. Какая модель самолета летящего на рейсах из Анапы имеет больше всего мест?
Ответ: Boeing 737-300

SELECT a.model
FROM dst_project.flights f
     JOIN dst_project.aircrafts a ON f.aircraft_code=a.aircraft_code
     JOIN dst_project.seats s ON f.aircraft_code=s.aircraft_code
WHERE f.departure_airport='AAQ'
GROUP BY a.model
ORDER BY count(seat_no) DESC
LIMIT 1



Код для задания:
1. Расширенный датасет

WITH flight_ids AS
  (SELECT DISTINCT f.flight_id
   FROM dst_project.flights f
   WHERE f.departure_airport in
       (SELECT airport_code
        FROM
          (SELECT DISTINCT a.airport_code
           FROM dst_project.airports a
           WHERE a.city = 'Anapa') AS airport_codes)
     AND (date_trunc('month', f.scheduled_departure) in ('2017-01-01',
                                                         '2017-02-01',
                                                         '2017-12-01'))
     AND f.status !='Cancelled')
SELECT f.flight_id,
       f.flight_no,
       'Anapa' departure_city,
               ap.city arrival_city,
               to_char(f.scheduled_arrival - f.scheduled_departure, 'HH24:MI') scheduled_flight_duration,
               to_char(f.actual_arrival - f.actual_departure, 'HH24:MI') actual_flight_duration,
               ac.model aircraft_model,
               ap.longitude longitude_arrival_airport,
               ap.latitude latitude_arrival_airport,
               '37.35' longitude_departure_airport,
               '45' latitude_departure_airport,
               ac.economy_seats,
               ec.quantity purchased_seats_economy,
               ac.business_seats,
               bus.quantity purchased_seats_business,
               (ac.economy_seats + ac.business_seats) all_seats,
               (ec.quantity + bus.quantity) seats_purchased_total,
               ec.amount revenue_economy_tickets,
               bus.amount revenue_business_tickets,
               (ec.amount + bus.amount) total_revenue_tickets
FROM dst_project.flights f
JOIN dst_project.airports ap ON ap.airport_code = f.arrival_airport
JOIN
  (SELECT a.*,
          count(DISTINCT s1.seat_no) economy_seats,
          count(DISTINCT s2.seat_no) business_seats
   FROM dst_project.aircrafts a
   LEFT JOIN dst_project.seats s1 ON s1.aircraft_code = a.aircraft_code
   AND s1.fare_conditions = 'Economy'
   LEFT JOIN dst_project.seats s2 ON s2.aircraft_code = a.aircraft_code
   AND s2.fare_conditions = 'Business'
   GROUP BY a.aircraft_code,
            a.model,
            a.range) ac ON ac.aircraft_code = f.aircraft_code
LEFT JOIN
  (SELECT t.flight_id,
          sum(t.amount) amount,
          count(t.amount) quantity
   FROM dst_project.ticket_flights t
   WHERE t.flight_id in
       (SELECT flight_id
        FROM flight_ids)
     AND t.fare_conditions = 'Economy'
   GROUP BY t.flight_id) AS ec ON ec.flight_id = f.flight_id
LEFT JOIN
  (SELECT t.flight_id,
          sum(t.amount) amount,
          count(t.amount) quantity
   FROM dst_project.ticket_flights t
   WHERE t.flight_id in
       (SELECT flight_id
        FROM flight_ids)
     AND t.fare_conditions = 'Business'
   GROUP BY t.flight_id) AS bus ON bus.flight_id = f.flight_id
WHERE f.flight_id in
    (SELECT flight_id
     FROM flight_ids)
     
     
2. Сгруппированный датасет

SELECT count(fin_tabl.flight_id) count_flight,
       fin_tabl.flight_no,
       fin_tabl.departure_city,
       fin_tabl.arrival_city,
       fin_tabl.scheduled_flight_duration,
       fin_tabl.aircraft_model,
       fin_tabl.longitude_arrival_airport,
       fin_tabl.latitude_arrival_airport,
       fin_tabl.longitude_departure_airport,
       fin_tabl.latitude_departure_airport,
       sum(fin_tabl.economy_seats) sum_all_economy_seats,
       sum(fin_tabl.purchased_seats_economy) sum_purchased_economy_seats,
       sum(fin_tabl.business_seats) sum_all_business_seats,
       sum(fin_tabl.purchased_seats_business) sum_purchased_business_seats,
       sum(fin_tabl.all_seats) sum_all_seats,
       sum(fin_tabl.seats_purchased_total) sum_all_purchased_seats,
       sum(fin_tabl.revenue_economy_tickets) sum_revenue_economy_tickets,
       sum(fin_tabl.revenue_business_tickets) sum_revenue_business_tickets,
       sum(fin_tabl.total_revenue_tickets) sum_total_revenue_tickets
FROM
  (WITH flight_ids AS
     (SELECT DISTINCT f.flight_id
      FROM dst_project.flights f
      WHERE f.departure_airport in
          (SELECT airport_code
           FROM
             (SELECT DISTINCT a.airport_code
              FROM dst_project.airports a
              WHERE a.city = 'Anapa') AS airport_codes)
        AND (date_trunc('month', f.scheduled_departure) in ('2017-01-01',
                                                            '2017-02-01',
                                                            '2017-12-01'))
        AND f.status !='Cancelled') SELECT f.flight_id,
                                           f.flight_no,
                                           'Anapa' departure_city,
                                            ap.city arrival_city,
                                            to_char(f.scheduled_arrival - f.scheduled_departure, 'HH24:MI') scheduled_flight_duration,
                                            to_char(f.actual_arrival - f.actual_departure, 'HH24:MI') actual_flight_duration,
                                            ac.model aircraft_model,
                                            ap.longitude longitude_arrival_airport,
                                            ap.latitude latitude_arrival_airport,
                                            '37.35' longitude_departure_airport,
                                            '45' latitude_departure_airport,
                                            ac.economy_seats,
                                            ec.quantity purchased_seats_economy,
                                            ac.business_seats,
                                            bus.quantity purchased_seats_business,
                                            (ac.economy_seats + ac.business_seats) all_seats,
                                            (ec.quantity + bus.quantity) seats_purchased_total,
                                            ec.amount revenue_economy_tickets,
                                            bus.amount revenue_business_tickets,
                                            (ec.amount + bus.amount) total_revenue_tickets
   FROM dst_project.flights f
   JOIN dst_project.airports ap ON ap.airport_code = f.arrival_airport
   JOIN
     (SELECT a.*,
             count(DISTINCT s1.seat_no) economy_seats,
             count(DISTINCT s2.seat_no) business_seats
      FROM dst_project.aircrafts a
      LEFT JOIN dst_project.seats s1 ON s1.aircraft_code = a.aircraft_code
      AND s1.fare_conditions = 'Economy'
      LEFT JOIN dst_project.seats s2 ON s2.aircraft_code = a.aircraft_code
      AND s2.fare_conditions = 'Business'
      GROUP BY a.aircraft_code,
               a.model,
               a.range) ac ON ac.aircraft_code = f.aircraft_code
   LEFT JOIN
     (SELECT t.flight_id,
             sum(t.amount) amount,
             count(t.amount) quantity
      FROM dst_project.ticket_flights t
      WHERE t.flight_id in
          (SELECT flight_id
           FROM flight_ids)
        AND t.fare_conditions = 'Economy'
      GROUP BY t.flight_id) AS ec ON ec.flight_id = f.flight_id
   LEFT JOIN
     (SELECT t.flight_id,
             sum(t.amount) amount,
             count(t.amount) quantity
      FROM dst_project.ticket_flights t
      WHERE t.flight_id in
          (SELECT flight_id
           FROM flight_ids)
        AND t.fare_conditions = 'Business'
      GROUP BY t.flight_id) AS bus ON bus.flight_id = f.flight_id
   WHERE f.flight_id in
       (SELECT flight_id
        FROM flight_ids)) AS fin_tabl
GROUP BY fin_tabl.flight_no,
         fin_tabl.departure_city,
         fin_tabl.arrival_city,
         fin_tabl.scheduled_flight_duration,
         fin_tabl.aircraft_model,
         fin_tabl.longitude_arrival_airport,
         fin_tabl.latitude_arrival_airport,
         fin_tabl.longitude_departure_airport,
         fin_tabl.latitude_departure_airport



Код на python, с помощью которого можно рассчитать расстояние между городом отправления и прибытия. Так как в Metabase не получилось использовать
найденные мной функции. Код подойдет как для сгруппированного, так и для расширенного датасета. В примере используется сгруппированный.


pip install geopy
import  pandas as pd 
from geopy.distance import geodesic

df = pd.read_csv('grouped-dataset.csv')


def distance_calc (row):
    start = (row['latitude_departure_airport'], row['longitude_departure_airport'])
    stop = (row['latitude_arrival_airport'], row['longitude_arrival_airport'])
    return geodesic(start, stop).kilometers
    
    
df['distance'] = df.apply (lambda row: distance_calc (row),axis=1)
